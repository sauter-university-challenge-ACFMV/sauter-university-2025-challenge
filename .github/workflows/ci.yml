name: CI - Code Quality

# Executa em PRs e pushes para branches principais
on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

jobs:
  # Job 1: Verificar estilo e formatação do código Python
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Hatch and dependencies
      run: |
        pip install hatch
        hatch env create
        hatch run pip install ruff

    # Verificar problemas de estilo no código
    - name: Lint with Ruff
      run: uv run ruff check src/

    # Verificar se o código está bem formatado
    - name: Format check with Ruff
      run: uv run ruff format --check src/

  # Job 2: Verificar anotações de tipo
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Hatch and dependencies
      run: |
        pip install hatch
        hatch env create
        hatch run pip install mypy
        hatch run pip install -r src/api/requirements.txt

    # Verificar tipos e possíveis erros de tipo
    - name: Type check with MyPy
      run: uv run mypy src/ --config-file=pyproject.toml

  # Job 3: Executar testes e verificar cobertura
  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Hatch and dependencies
      run: |
        pip install hatch
        hatch env create
        hatch run pip install -r src/api/requirements.txt
        hatch run pip install pytest pytest-cov

    # Executar testes com cobertura mínima de 85%
    - name: Run tests with coverage
      run: uv run pytest src/api/tests/ --cov=src/api --cov-report=html --cov-fail-under=85

  # Job 4: Construir imagem Docker (só executa se outros jobs passaram)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [lint, type-check, test]

    steps:
    - uses: actions/checkout@v4

    # Construir imagem Docker para validar containerização
    - name: Build Docker image
      run: |
        cd src/api
        docker build -t university-api .
